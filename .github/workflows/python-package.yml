# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.5, 3.6, 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install tox-gh-actions
          poetry install
      - name: Test
        run: |
          tox

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install tox-gh-actions
          poetry install
      - name: Lint
        run: |
          source .venv/bin/activate
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  i18n:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install gettext
        run: |
          sudo apt-get install -y gettext-base gettext
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install tox-gh-actions
          poetry install
      - name: i18n validation
        run: |
          tox -e i18n

  release-test:
    runs-on: ubuntu-latest

    needs: [test, lint, i18n]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: casperdcl/deploy-pypi@v2
        with:
          url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          build: true
          skip_existing: true

  release-production:
    # Only upload if a tag is pushed (otherwise just build & check)
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    runs-on: ubuntu-latest

    needs: [test, lint, i18n, release-test]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: casperdcl/deploy-pypi@v2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          build: true
